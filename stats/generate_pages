#!/usr/bin/env ruby

require 'json'
require 'erb'
require 'octokit'
require 'fileutils'
require_relative 'stats.rb'

def current_directory
  File.dirname(__FILE__)
end

def store_build_asset(name, value)
   build_directory = File.join(current_directory, 'build')
  Dir.mkdir(build_directory) unless Dir.exist?(build_directory)
  File.binwrite(File.join(build_directory, name), value)
end

def erb_template_for(template_name)
  template_path = File.join(current_directory, template_name)
  ERB.new(File.binread(template_path))
end

puts "Loading stats..."
if !ENV.has_key?('GITHUB_OAUTH_TOKEN')
  puts "An authentication method environment variable must be set"
  puts "Please set GITHUB_OAUTH_TOKEN"
  exit 1
end

projects = [
  'rapid7/metasploit-framework',

  'rapid7/metasploit-payloads',
  'rapid7/meterpreter',
  'rapid7/metasploit-javapayload',
  'rapid7/metasploit-omnibus',
  'rapid7/metasploit_data_models',
  'rapid7/metasploit-credential',
  'rapid7/metasploit-model',
  'rapid7/metasploit-aggregator',
  'rapid7/metasploit-baseline-builder',
  'rapid7/metasploit-vulnerability-emulator',
  'rapid7/network_interface',
  'rapid7/rex-encoder',
  'rapid7/rex-rop_builder',
  'rapid7/rex-mime',
  'rapid7/rex-nop',
  'rapid7/rex-text',
  'rapid7/rex-powershell',
  'rapid7/rex-sslscan',
  'rapid7/rex-socket',
  'rapid7/rex-core',
  'rapid7/rex-bin_tools',
  'rapid7/rex-ole',
  'rapid7/rex-arch',
  'rapid7/rex-struct2',
  'rapid7/rex-registry',
  'rapid7/rex-java',
  'rapid7/rex-zip',
  'rapid7/rex-random_identifier',
  'rapid7/rex',
  'rapid7/mettle',
  'rapid7/metasploitable3',
  'rapid7/msfrpc-client',
  'rapid7/fastlib',
  'rapid7/ruby_smb',
  'rapid7/vm-automation'
]

stats = IssueStats.new(ENV['GITHUB_OAUTH_TOKEN'], projects)

steady_state_charts = [
  {
    page: 'index',
    title: "Open Pull Requests",
    labels: [],
    pull_requests: true
  },
  {
    page: 'features_and_enhancements',
    title: "Open Features and Enhancements",
    labels: ["feature", "enhancement"],
    pull_requests: false
  },
  {
    page: 'bugs',
    title: "Open Bugs",
    labels: ["bug"],
    pull_requests: false
  }
]

change_charts = [
  {
    page: 'pull_request_rates',
    title: 'Pull Requests per Quarter',
    labels: [],
    pull_requests: true
  },
  {
    page: 'bug_rates',
    title: 'Bugs per Quarter',
    labels: ["bug"],
    pull_requests: false
  },
  {
    page: 'feature_and_enhancement_rates',
    title: 'Features and Enhancements per Quarter',
    labels: ["feature", "enhancement"],
    pull_requests: false
  },
]

today = DateTime.now
last_week = today - 7
last_month = today - 30

puts 'generating json...'
store_build_asset('contributors_all.json', stats.contributors_all_json.to_json)
store_build_asset('contributors_month.json', stats.contributors_month_json.to_json)
store_build_asset('contributors_year.json', stats.contributors_year_json.to_json)
store_build_asset('commits_modules.json', stats.commits_modules_json.to_json)
store_build_asset('commits_merged.json', stats.commits_merged_json.to_json)
store_build_asset('issues_newbie.json', stats.issues_newbie_json.to_json)

puts 'Moving assets'
FileUtils.cp_r File.join(current_directory, 'assets'), File.join(current_directory, 'build', 'assets')

puts "Making some (sausage) links..."
toc = ''
accordion = '
            '
change_charts.each do |chart|
  toc << "
  <li role=\"presentation\">
    <a href=\"#{chart[:page]}.html\" >#{chart[:title]}</a>
  </li>"
end

steady_state_charts.each do |chart|
  items = stats.new_things_between(last_week, today,
    chart[:pull_requests], chart[:labels])

  toc << "
  <li role=\"presentation\">
    <a href=\"#{chart[:page]}.html\" >#{chart[:title]}
      <span class=\"badge\">#{items.length} since last week</span>
    </a>
  </li>"

  accordion << "
    <div class=\"panel panel-primary\">
      <div class=\"panel-heading\" data-toggle=\"collapse\"
           data-parent=\"#accordion\" data-target=\"\##{chart[:page]}\">
        <h4 class=\"panel-title\">New #{chart[:title]}</h4>
      </div>
      <div id=\"#{chart[:page]}\" class=\"panel-collapse collapse\">
      <div class=\"panel-body\">
        Check out some of the new #{chart[:title]} for this week!
      </div>
      <div class=\"table-responsive\">
      <table class=\"table\">
    "

  items.each do |item|
    url = "https://github.com/#{item.project}/issues/#{item.number}"
    accordion << "
          <tr>
            <td class=\"resource_url\">
              <a target=\"_blank\" href=\"#{url}\">
                <span class=\"fa-fw fa fa-github\">#{item.title}</span>
              </a>
            </td>

            <td class=\"resource_date\" nowrap>
              <em>#{item.created_at}</em>
            </td>

            <td class=\"resource_author\" nowrap>
              #{item.reporter}
            </td>
          </tr>"
  end

  accordion << '</table></div></div></div>'
end
accordion << '</div>'

top_committers = stats.top_committers(last_month)

top_committers_html = "<tr>\n"
top_committers.each_with_index do |(committer, count), idx|
  top_committers_html << "<td>#{committer} (#{count})</td>"
  if ((idx + 1) % 10).zero?
    top_committers_html << "</tr>\n<tr>"
  end
end
top_committers_html << "</tr>\n"

puts "And a cherry on top for good measure!"

title = ''
stat_data = []
stat_r7_data = []
open_stat_data = []
close_stat_data = []
open_r7_stat_data = []
close_r7_stat_data = []

steady_state_charts.each do |chart|
  title = chart[:title]
  stat_data = []
  stat_r7_data = []
  (DateTime.new(2011, 1, 1)..DateTime.now).each do |date|
    issues = stats.open_things_on(date, chart[:pull_requests], chart[:labels])
    if issues.length > 0
      stat_data << [date.to_time.to_i * 1000, issues.length]
    end

    issues = stats.open_things_on(date, chart[:pull_requests], chart[:labels], '-r7')
    if issues.length > 0
      stat_r7_data << [date.to_time.to_i * 1000, issues.length]
    end
  end
  template = erb_template_for('template.erb')
  store_build_asset("#{chart[:page]}.html", template.result)
end

def step_by_quarter(start_date, end_date)
  date = start_date
  until date >= end_date
    next_date = date >> 3
    yield date, [next_date, end_date].min
    date = next_date
  end
end

change_charts.each do |chart|
  title = chart[:title]
  open_stat_data = []
  close_stat_data = []
  open_r7_stat_data = []
  close_r7_stat_data = []

  today = Date.today
  nearest_quarter = Date.new(today.year, [10,7,4,1].find { |m| m <= today.month })
  four_years_ago = nearest_quarter << 12 * 4

  step_by_quarter(four_years_ago, today) do |quarter_beginning, quarter_end|

    issues = stats.new_things_between(quarter_beginning,
                                      quarter_end,
                                      chart[:pull_requests],
                                      chart[:labels])
    if !issues.empty?
      open_stat_data << [quarter_end.to_time.to_i * 1000, issues.count]
    end

    issues = stats.new_things_between(quarter_beginning,
                                      quarter_end,
                                      chart[:pull_requests],
                                      chart[:labels],
                                      '-r7')
    if !issues.empty?
      open_r7_stat_data << [quarter_end.to_time.to_i * 1000, issues.count]
    end

    issues = stats.closed_things_between(quarter_beginning,
                                         quarter_end,
                                         chart[:pull_requests],
                                         chart[:labels])
    if !issues.empty?
      close_stat_data << [quarter_end.to_time.to_i * 1000, issues.count]
    end

    issues = stats.closed_things_between(quarter_beginning,
                                         quarter_end,
                                         chart[:pull_requests],
                                         chart[:labels],
                                         '-r7')
    if !issues.empty?
      close_r7_stat_data << [quarter_end.to_time.to_i * 1000, issues.count]
    end
  end
  template = erb_template_for('template_change.erb')
  store_build_asset("#{chart[:page]}.html", template.result)
end

puts "All done!"
